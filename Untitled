import { join } from 'node:path'
import { dyno, Table } from '../index.js'

await dyno({
  // location of task file
  task: join(import.meta.dirname, 'task.js'),
  parameters: {
    // required test parameters
    CYCLES_PER_SECOND: 10, 
    CONCURRENCY: 4, 
    DURATION_MS: 5 * 1000,
    
    // custom parameters,
    // passed on to 'task.js'
    FIB_NUMBER: 35,
    ITERATIONS: 3
  },

  render: function(threads) {
    // `threads` contains: 
    // - histograms & histogram snapshots,
    //   per task, per thread
    
    // Logging the output in table format ...
    
    // Primary output: 
    // - Generic test information, 
    //   cycles sent/finished etc..
    // - Cannot log custom measures here
    // 
    // available measures:
    // - 'sent', number of issued cycles 
    // - 'done', number of completed cycles 
    // - 'backlog', backlog of issued yet uncompleted cycles
    // - 'uptime', current test duration
    const pid  = process.pid.toString()
    const main = threads[process.pid.toString()]
    const views = [
      new Table('Tasks', [
        {
          'sent'   : main.sent?.count,
          'done'   : main.done?.count,
          'backlog': main.sent?.count - main.done?.count,
          'uptime' : main.uptime?.count
        }
      ]),
  
      new Table('Threads', Object.keys(threads)
      .filter(tid => tid !== pid)
      .map(pid => ({
        'thread': pid,
        'task': Math.round(threads[pid].task?.mean),
        'fibonacci': Math.round(threads[pid].fibonacci?.mean)
      })))
    ]
    // display only the top 5 threads, 
    // sorted by mean task duration
    .sort((a, b) => b[1] - a[1]).slice(0, 5)

      
    // render the tables
    //console.clear()
    views.forEach(view => console.log(view.toString()))  
  }
})
